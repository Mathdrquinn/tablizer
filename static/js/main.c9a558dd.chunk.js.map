{"version":3,"sources":["components/tablizer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Tablizer","state","text","textDelimiter","prependText","prependTextDelimiter","prependTextType","appendText","appendTextDelimiter","appendTextType","updateText","e","setState","currentTarget","value","updateTextDelimeter","d","updateAppendText","updateAppendTextDelimiter","updatePrependText","updatePrependTextDelimiter","onSubmit","preventDefault","onChange","this","type","onClick","disabled","split","getDelimiter","map","data","i","dataArray","prependDataList","prependData","slice","length","appendDataList","appendData","key","React","App","style","maxWidth","margin","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c9a558dd.chunk.js","sourcesContent":["import * as React from 'react';\r\n\r\ntype Delimiter = 'comma' | 'comma space' | 'tab' | 'space' | 'newline';\r\ntype Recurrance = 'instance' | 'repeating';\r\n\r\nexport interface ITablizerProps {\r\n}\r\n\r\nexport interface ITablizerState {\r\n  text: string;\r\n  textDelimiter: Delimiter;\r\n  prependText: string;\r\n  prependTextDelimiter: Delimiter;\r\n  prependTextType: Recurrance;\r\n  appendText: string;\r\n  appendTextDelimiter: Delimiter;\r\n  appendTextType: Recurrance;\r\n}\r\n\r\nexport default class Tablizer extends React.Component<ITablizerProps, ITablizerState> {\r\n  state: ITablizerState = {\r\n    text: 'this, is, the, beginning, of, a, very, simple, app',\r\n    textDelimiter: 'comma space',\r\n    prependText: '1, 2',\r\n    prependTextDelimiter: 'comma space',\r\n    prependTextType: 'repeating',\r\n    appendText: 'a, b, c',\r\n    appendTextDelimiter: 'comma space',\r\n    appendTextType: 'repeating'\r\n  };\r\n\r\n  updateText: React.ChangeEventHandler<HTMLTextAreaElement> = (e) => {\r\n    return this.setState({ text: e.currentTarget.value })\r\n  }\r\n\r\n  updateTextDelimeter = (d: Delimiter): React.MouseEventHandler<HTMLButtonElement> => (e) => {\r\n    return this.setState({ textDelimiter: d })\r\n  }\r\n\r\n  updateAppendText: React.ChangeEventHandler<HTMLTextAreaElement> = (e) => {\r\n    return this.setState({ appendText: e.currentTarget.value })\r\n  }\r\n\r\n  updateAppendTextDelimiter = (d: Delimiter): React.MouseEventHandler<HTMLButtonElement> => (e) => {\r\n    return this.setState({ appendTextDelimiter: d })\r\n  }\r\n\r\n  updatePrependText: React.ChangeEventHandler<HTMLTextAreaElement> = (e) => {\r\n    return this.setState({ prependText: e.currentTarget.value })\r\n  }\r\n\r\n  updatePrependTextDelimiter = (d: Delimiter): React.MouseEventHandler<HTMLButtonElement> => (e) => {\r\n    return this.setState({ prependTextDelimiter: d })\r\n  }\r\n\r\n  static getDelimiter(d: Delimiter) {\r\n    switch (d) {\r\n      case 'comma': {\r\n        return ','\r\n      }\r\n      case 'comma space': {\r\n        return ', '\r\n      }\r\n      case 'tab': {\r\n        return '\\t'\r\n      }\r\n      case 'space': {\r\n        return ' '\r\n      }\r\n      case 'newline': {\r\n        return '\\n'\r\n      }\r\n      default: {\r\n        return ', '\r\n      }\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <>\r\n        <form onSubmit={(e) => e.preventDefault()}>\r\n          <fieldset>\r\n            <legend>Main Data</legend>\r\n            <label>Paste text here:\r\n              <br />\r\n              <textarea onChange={this.updateText} value={this.state.text}></textarea>\r\n            </label>\r\n            <label>Select delimiter:\r\n            <button type=\"button\" onClick={this.updateTextDelimeter('comma')} disabled={this.state.textDelimiter === 'comma'}>Comma</button>\r\n              <button type=\"button\" onClick={this.updateTextDelimeter('comma space')} disabled={this.state.textDelimiter === 'comma space'}>Comma with space</button>\r\n              <button type=\"button\" onClick={this.updateTextDelimeter('tab')} disabled={this.state.textDelimiter === 'tab'}>Tab</button>\r\n              <button type=\"button\" onClick={this.updateTextDelimeter('space')} disabled={this.state.textDelimiter === 'space'}>Space</button>\r\n              <button type=\"button\" onClick={this.updateTextDelimeter('newline')} disabled={this.state.textDelimiter === 'newline'}>NewLine</button>\r\n            </label>\r\n          </fieldset>\r\n          <fieldset>\r\n            <legend>Prepend Data</legend>\r\n            <label>Prepend:\r\n              <br />\r\n              <textarea onChange={this.updatePrependText} value={this.state.prependText}></textarea>\r\n            </label>\r\n            <label>Select delimiter:\r\n            <button type=\"button\" onClick={this.updatePrependTextDelimiter('comma')} disabled={this.state.prependTextDelimiter === 'comma'}>Comma</button>\r\n              <button type=\"button\" onClick={this.updatePrependTextDelimiter('comma space')} disabled={this.state.prependTextDelimiter === 'comma space'}>Comma with space</button>\r\n              <button type=\"button\" onClick={this.updatePrependTextDelimiter('tab')} disabled={this.state.prependTextDelimiter === 'tab'}>Tab</button>\r\n              <button type=\"button\" onClick={this.updatePrependTextDelimiter('space')} disabled={this.state.prependTextDelimiter === 'space'}>Space</button>\r\n              <button type=\"button\" onClick={this.updatePrependTextDelimiter('newline')} disabled={this.state.prependTextDelimiter === 'newline'}>NewLine</button>\r\n            </label>\r\n          </fieldset>\r\n          <fieldset>\r\n            <legend>Append Data</legend>\r\n            <label>Append:\r\n              <br />\r\n              <textarea onChange={this.updateAppendText} value={this.state.appendText}></textarea>\r\n            </label>\r\n            <label>Select delimiter:\r\n            <button type=\"button\" onClick={this.updateAppendTextDelimiter('comma')} disabled={this.state.appendTextDelimiter === 'comma'}>Comma</button>\r\n              <button type=\"button\" onClick={this.updateAppendTextDelimiter('comma space')} disabled={this.state.appendTextDelimiter === 'comma space'}>Comma with space</button>\r\n              <button type=\"button\" onClick={this.updateAppendTextDelimiter('tab')} disabled={this.state.appendTextDelimiter === 'tab'}>Tab</button>\r\n              <button type=\"button\" onClick={this.updateAppendTextDelimiter('space')} disabled={this.state.appendTextDelimiter === 'space'}>Space</button>\r\n              <button type=\"button\" onClick={this.updateAppendTextDelimiter('newline')} disabled={this.state.appendTextDelimiter === 'newline'}>NewLine</button>\r\n            </label>\r\n          </fieldset>\r\n        </form>\r\n        <table>\r\n          <thead>\r\n            <tr></tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.state.text.split(Tablizer.getDelimiter(this.state.textDelimiter)).map((data, i, dataArray) => {\r\n              const prependDataList = this.state.prependText === '' ? null : this.state.prependText.split(Tablizer.getDelimiter(this.state.prependTextDelimiter));\r\n              const prependData = prependDataList && prependDataList.slice(i % prependDataList.length, (i % prependDataList.length) + 1);\r\n\r\n              const appendDataList = this.state.appendText === '' ? null : this.state.appendText.split(Tablizer.getDelimiter(this.state.appendTextDelimiter));\r\n              const appendData = appendDataList && appendDataList.slice(i % appendDataList.length, (i % appendDataList.length) + 1);\r\n\r\n              return (\r\n                <tr key={i + data}>\r\n                  {prependData ? (<td>{prependData}</td>) : null}\r\n                  <td>{data}</td>\r\n                  {appendData ? (<td>{appendData}</td>) : null}\r\n                </tr>\r\n              )\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.scss';\nimport Tablizer from './components/tablizer';\n\nconst App: React.FC = () => {\n  return (\n    <main style={{ maxWidth: '800px', margin: '2rem auto' }}>\n      <Tablizer />\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}